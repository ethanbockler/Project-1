Lab 5 - MESK Group

Agile/user Stories:
1. As an administrator, I want to be able to add national parks to the list without users being able to access maintenance.
Description:
This story is at the back end of the software and should be included in the code. The overall goal for this section of the project should be to be able to add national parks to our national parks list so that the user is able to access information about them when using our software. Ideally, this section of the code will be in the “administrator” section and will only be accessible by a password. The reason for this is ease of use; adding a national park should not require a rewrite of the entire code, instead it should be a part of the software where an administrator can access and easily input data for a new national park, that is then added to the final product.
Estimation:
The estimation for this story should be moderate to difficult, the difficult part of it will be inputting the data through qt, since many in the group are not amazingly familiar with the software. Writing the code should not take long and should really need one function for it to be complete. One thing that could raise a problem is storing the park after the program has finished running.
Assumptions:
Our assumptions are that we are able to gather all the necessary information about a given national park that we want to add to our software. Another assumption is that we have the ability to manually input this through qt and are able to store it for future use. Our password should protect outside sources from being able to add national parks, making it only accessible for those in our group.
Priority & Assignee(s): Kabir (Coding & Qt), Ethan (Qt)
	This should be a very high priority as it is the backbone of our project, and without the ability to add national parks, the software would basically be useless.
Tasks and Tests:
Write code that when accessed can create a national park using the information an administrator enters
Make this section of the software easy to use through Qt and only accessible to those who have the administrator password
Create a system to store national parks after the software has finished running (File i/o)
Definition of Done:
Code fully functional and peer reviewed by the team
Be able to access through an administrative password
Stores a new national park in a file to then be used in the future by anyone who accesses the software
The customer should not be able to access or add new national parks, but should be able to see new ones that administrators have created
Prints back the national park in the GUI to ensure it is successfully added


2. As a customer, I want to be able to seek support, so that I am able to use this program easily and efficiently. 
Description:
	It should be a top priority to us that the customer can use the program easily and can report any problems with it so future customers do not face similar issues. This story implements a support button that should contain two different sections. The first section should be any frequently asked questions and tips on how to use our program properly and effectively. The second section should include a form of contact that allows the user to send us any complaints or concerns about the program so that we are able to communicate with them and hopefully find a way to fix their issues.
Estimation:
	This story should be very easy since most of the code is outputting text data onto the screen. There are multiple ways to accomplish the support button but all of them are easy. The most efficient way to accomplish the button would be for the user to leave a message along with a contact email that is stored in a file, where we can then email them back. Another option would be to link them to an email or phone number.
Assumptions:
	The customer has some sort of contact information that we are able to communicate through and are able to contact support should they need any help using our application software.
Priority & Assignee(s): Kabir
	This should be a moderate priority since it should be able to be done very easily and it is a part of the code which is required. All of our lab members should familiarize themselves with Qt since it is going to be a very important part of this project, and the only part of this particular task that may pose any issues just due to the fact that we do not have a lot of experience using this application.
Tasks and Tests:
Write code that can be accessed by anyone using the program that allows the user to access any necessary information about how to use the program as well as a support button that should allow a customer to submit a complaint or support ticket that we can assist them with.
This section of the code needs to be extremely clear and concise as it is a tool that is used to assist those who are confused.
Test run to see if messages are being stored correctly and the contact information works well.
Definition of Done:
A “contact us” button that allows the user to access contact information and necessary information about the program
Code that fully adheres to our coding standards and is checked by all members of our project
Output clear statements that help the customer understand how to use and maneuver through the program
A complaint or support system that helps the customer quickly and effectively


3. As a team, we want to use the Qt software so that our program is completely interactive and fully functional to the customer through the Qt software.
Description:
	Our team must gain complete knowledge about how to use the Qt software in order to implement it into our program. We seek to display a menu that links to various different functions of the software and additionally, we seek to make the software easy to follow and readable. We are going to do this after we are done coding everything so that we only have to focus on the Qt software instead of the entire program.
Estimation:
	This story will be one of the most difficult ones as many of the members are unfamiliar with Qt, making the overarching goal of providing an interactive menu more difficult. 
Assumptions: 
	Our assumption is that once we get to this task all members should have a basic knowledge on how to use Qt software in order to work together in completing our tasks.
Priority & Assignee(s): All members
	This should be a significantly high priority as it is part of the end software and the customer experience is going to heavily rely on our mastery over Qt. Additionally, each member is going to need to put in work before we even get to this section as the knowledge of Qt is limited for all members in this group.
Tasks and Tests: 
Create an interactive menu that allows the user to navigate the program and access all of its features through Qt
Knowledge Qt to the point where we are all able to successfully create button tests that run parallel to our functions so that our program maintains its functionality
All team members are to use Qt on their own so that when we get to the task of creating this menu, we already have a basic understanding about how the software works
The customer should be able to move through the application seamlessly and efficiently since all of the buttons should work
Definition of Done:
A working menu that allows the user to navigate the program by means of pressing different clearly labeled buttons
A software that is easy to read and follow so that the customer isn’t lost while using the program
All of the functionality that we had prior to coding in Qt should be maintained after we are done using Qt


4. As a customer, I want to be able to access a help option to understand the use/purpose of the program easily based on the descriptions and tools provided.
Description:
This story is all about the successful communication of the application’s purposes and uses to its customers so that the customer understands how and when to use the application and why they might need it.
Estimation:
This story should be relatively quite easy to achieve regarding technicality as it focuses more so on the directions and instructions provided with the application and will require just a clear, concise way of writing descriptively. A basic rough draft should take max one hour.
Assumptions:
We assume the customer knows English as that is the language we will be writing in and that they have very basic knowledge about what the application does and wants to know more. 
Priority & Assignee(s): All team members
The priority is medium as directions/descriptions can be rewritten/adjusted/fixed/edited anytime throughout the developmental process, but a basic format should be completed to help guide the actual coding of the application and the purposes/uses of its tools.
Tasks and Tests: 
Write a clear and concise couple of paragraphs that gives an overview of the uses, tools, and purposes of the application directed for the customer’s and user’s use of it.
Code a help button in the back end and front end of the code using QT
Test run with a team member acting as an interested customer and see if the app passes our definition of good usability.
Definition of done:
Code fully documented and functional (all syntax and logic errors fixed)
Code adheres to coding standard 
Completes all points under the lists of tasks/tests
Peer reviewed (or produced with pair programming) 
The customer verifies that the story was done correctly


5. As a customer, I want to be able to see a display of the list of National Parks sorted by area.
Description:
This story is about creating a sorting algorithm that is sorted from least to greatest area and that is displayed in a table format. This will help the application better fit the customer’s needs. 
Estimation: 
This story should be easy to achieve as it will not take too much time to create a sorting algorithm for numbers from least to greatest.  
Assumptions:
We assume the customer wants the top of the list to be the lowest area quantity and the last on the list to be the greatest. 
Priority & Assignee(s): All members
This story has medium priority, as the sorting should be one of the easier ones out of the rest and thus can be done later since it will be quick. 
List of tasks and tests: 
Create a sorting algorithm, insertion, selection or bubble that does not depend on the list already being sorted
Test the sort by plugging in test numbers in the main file 
Definition of done:
All points under list of tasks and tests completed 
The code follows all coding standards
The code has no errors 
All team members agree that the story was done correctly


6. As a customer, I want to be able to see the result of any sortings in a clear, understandable, and standardized table format.
Description:
This story wants to make sure that any user of the application can understand the results of the sorted lists, meaning that the information is always presented in an organized and standardized manner.
Estimation:
This story should be around a low-medium estimation (a couple coding days) as it will require code that has to do with the visual representation of the sorted lists and while it would require some coding, the intensity of the coding will not be high. 
Assumptions:
We assume the user wants to see the lists in a chart/table format and wants that to be the case for any list produced. 
Priority & Assignee(s): All members
The priority is not high as of right now as the coding that actually produces the lists is more of a priority and the code for the visual representation is not needed immediately when just starting to code. 
List of tasks and tests: 
Get familiar with relevant coding tools/softwares that help with formats 
Create code that formats the information in a table with clear column and row titles, may use QT
Test a practice run with random info that places the list’s items in table format
Definition of done:
Code fully documented and functional (all syntax and logic errors fixed)
Code adheres to coding standard 
Completes all points under the lists of tasks/tests
Peer reviewed (or produced with pair programming) 
The user confirms that the story was done correctly


7. As a team member I want the program to be able to read from the given input file for the national parks.
 Detailed Description: 
This story makes sure that the program is able to read in all of the necessary information for national parks and store the information to be used for output.
Story Point Estimation:
This story should be easy to complete, because all it will take is to create the input file itself by copying the information from excel and writing the code to read from said file.
List of Assumptions: 
We assume that the information that the customer will want to read for national parks is the name, state, number of visitors, and size and that the given information is correct.
Priority: 
This story is high priority, because the input file contains all of the data that the program will be working with and displaying to the customer.
Assignee(s):
Kabir, Ethan
List of Task and Test:
Create the input file by copying information from excel spreadsheet that is provided for the project
Write code to read in data from input file
Test program by outputting all of the information for the national parks to the console
Peer review
Definition of Done:
Program reads in info from input file 
Program is able to correctly display information from input file
Code adheres to coding standards
Peer reviewed


8. As a team programmer, I want to implement a feature that clearly displays the original list of National parks sorted by the number of visitors so that customers can compare the attendance numbers of each park. 
Detailed Description: 
This story regards coding of a sorting algorithm that lists all the national parks in terms of number of visitors. The national parks with the highest number of visitors will be displayed towards the top and the national parks with the lowest number of visitors will be displayed towards the bottom. 
Story Point Estimation: 
~3-5 This story should be easy to complete since the sorting algorithm will compare numbers, or integers rather. If a national park’s # of visitors is higher than the one being compared to, then it moves towards the top. This will require at most 2-3 days of coding and another 2-3 days of debug, review, and approval by other teammates.
List of Assumptions: 
The input list of national parks must be functional first
This sorting algorithm will be nearly the same or identical to the sorting algorithm that lists national parks by number of acres
Assume that the input list is correct in terms of data for each national park so that the list of national parks sorted by visitors is identical to other teams. 
Priority: 
This story is high priority as it is meant to be finished by Sprint 1.
Assignee(s):
All members
List of Tasks and Tests:
Figure out how to access the input list
Create a sorting algorithm (such as bubble sort) that compares # of visitors
Display the list in a clean fashion from most visitors to least visitors
Discuss with other group members when you plan to work on/complete a task
Stick to style and documentation guidelines
Test run and have others peer review
Definition of Done:
Fully functional code that lists every park according to the # of visitors
Display should look clean and can read every park and the # of visitors
Peer reviewed and approved by project manager 
Adheres to style guidelines
All members concur that this story is completed 


9. As a team member, I want to finish the sorting algorithms by the end of sprint one so that we can then focus on the visual aspects of our project and put all of our code together.
Description:
This story emphasizes the importance of everyone sticking to the schedule so that by finishing the sorting algorithms by sprint one, the team gets through a huge section of the project and all that is left to finish is the actual implementation of the algorithms in the overall code and overall design of the pamphlet.
Estimation: 
This story should be around a medium-medium high estimation since it may require 2-3 days for everyone to finish their assigned sorting algorithms, taking into account that team members also have other assignments outside of the project to do. 5-8
Assumptions: 
We assume that everyone should stick to coding guidelines and should finish their assigned algorithm at least 2 days before sprint one is due. 
Priority & Assignee(s): All members
This is high priority because this is what is due for sprint one and we cannot advance further in the project without getting the sorting algorithms finished.
List of tasks and tests:
Review previous sorting algorithms from various assignments
Write functional and efficient code that sorts the national parks and sticks to coding guidelines
Test a practice run with both random inputs as well as the list of national parks
Finish two days before sprint 1
Definition of done:
Sorting algorithm is fully functional and peer reviewed by other teammates 
Code fully documented and adheres to coding guidelines
Desk checks that each section covers what needs to be input, output/displayed what the user wants. Ex: Sorting algorithms should show the parks in what order that was called on. 
Code checked into source control system
Product owner, as well as other teammates concur the code and user story is
Completed


10. As a team programmer, I want to provide an option to display the updated total number of visitors and acres so that the customer can interact with the pamphlet more.
Description:
This story regards the last 2 implementations listed on the National parks interactive pamphlet worksheet. The interactive pamphlet allows the customer of the program to add new National parks, in addition to the ones already inputted into the program. When a customer adds a new national park, the data for the number of visitors and acres should be updated to reflect any national park additions. 
Story point estimation:
~5 Debugging and reviewing the functionality of the code may require 2-3 days to complete and another 2-3 days to debug, assess, and approve. This story is one that will be completed later in the schedule as the algorithm to add new national parks must be completed before this story. As long as the team sticks to the schedule and manages their time well, this story should be easy to finish.
Assumptions:
The sorting algorithm needs to be completed first
This will coincide with the creation of adding new parks
When adding new parks, the total #of visitors and acres should update along with the list of national parks
This will require at most 2-3 days to create
This will require at most 2-3 days to review the functionality, debugging, documenting, adherence to style guidelines, and approval by project manager.
Priority & Assignee(s): All members
Medium priority, this story is to be finished right after sprint 1
List of tasks and tests:
Create a clean display of the total # of visitors and acres
Adhere to style, documentation, and overall code guidelines
Practice run and test each section’s code 
Peer review section by section, as well as entire code
Definition of done:
Code is fully functional, no bugs, and sticks with the coding guidelines
Desk check that each section covers what needs to be input, output/displayed what the user wants 
Ran practice tests to ensure functionality
Peer reviewed
Confirm code and story user by project manager, as well as other teammates




Stories to be done in Sprint 1: #5 #7 #8 #9
The goal of sprint one is to set a clear foundation for future progress: This includes setting up rules and coding standards as well as which tasks are to be done by each team member. Additionally, we want to be able to start making the basics of our program so that we have a platform to build on. The basics of our program include foundational code and a setup of the files we need. 



Team Rules:
1. Please make sure that you are able to make it to all of our predetermined meetings, and if a situation occurs where you are unable to make it to a meeting, please notify the group ahead of time
2. Please submit all of your code into the github repository on time, and peer review other members code.
3. If an individual is stuck on a certain task please notify the group so that we can schedule a time to help the individual or swap tasks with another person. 




Coding Standards:
1. Make sure to comment on your functions to ensure that every team member is aware of what your code is doing.
2. Space your code clearly so that it is easily readable by the other team members.
3. Use the correct capitalization standards that are present in our CS1C class so that data is easy to work with and access.



Extra Links and References
https://www.mountaingoatsoftware.com/agile/user-stories
https://www.visual-paradigm.com/scrum/what-is-agile-planning-poker/
“As a [persona], I [want to], [so that].”
